type AccessibilitySubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  link: String
  name: String!
  updatedAt: DateTime
}

type AccessibilitySubServiceEntity {
  attributes: AccessibilitySubService
  id: ID
}

type AccessibilitySubServiceEntityResponse {
  data: AccessibilitySubServiceEntity
}

type AccessibilitySubServiceEntityResponseCollection {
  data: [AccessibilitySubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input AccessibilitySubServiceFiltersInput {
  and: [AccessibilitySubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  link: StringFilterInput
  name: StringFilterInput
  not: AccessibilitySubServiceFiltersInput
  or: [AccessibilitySubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input AccessibilitySubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  link: String
  name: String
}

type Attributes {
  publishedAt: DateTime!
  title: String!
}

type AudienceType {
  createdAt: DateTime
  type: String
  updatedAt: DateTime
}

type AudienceTypeEntity {
  attributes: AudienceType
  id: ID
}

type AudienceTypeEntityResponse {
  data: AudienceTypeEntity
}

type AudienceTypeEntityResponseCollection {
  data: [AudienceTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input AudienceTypeFiltersInput {
  and: [AudienceTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: AudienceTypeFiltersInput
  or: [AudienceTypeFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input AudienceTypeInput {
  type: String
}

type AudienceTypeRelationResponseCollection {
  data: [AudienceTypeEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type CguSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  link: String
  name: String!
  updatedAt: DateTime
}

type CguSubServiceEntity {
  attributes: CguSubService
  id: ID
}

type CguSubServiceEntityResponse {
  data: CguSubServiceEntity
}

type CguSubServiceEntityResponseCollection {
  data: [CguSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input CguSubServiceFiltersInput {
  and: [CguSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  link: StringFilterInput
  name: StringFilterInput
  not: CguSubServiceFiltersInput
  or: [CguSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input CguSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  link: String
  name: String
}

type ChannelType {
  createdAt: DateTime
  type: String
  updatedAt: DateTime
}

type ChannelTypeEntity {
  attributes: ChannelType
  id: ID
}

type ChannelTypeEntityResponse {
  data: ChannelTypeEntity
}

type ChannelTypeEntityResponseCollection {
  data: [ChannelTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input ChannelTypeFiltersInput {
  and: [ChannelTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ChannelTypeFiltersInput
  or: [ChannelTypeFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ChannelTypeInput {
  type: String
}

type ChannelTypeRelationResponseCollection {
  data: [ChannelTypeEntity!]!
}

type City {
  createdAt: DateTime
  label: String!
  postalCode: String!
  updatedAt: DateTime
}

type CityEntity {
  attributes: City
  id: ID
}

type CityEntityResponse {
  data: CityEntity
}

type CityEntityResponseCollection {
  data: [CityEntity!]!
  meta: ResponseCollectionMeta!
}

input CityFiltersInput {
  and: [CityFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  label: StringFilterInput
  not: CityFiltersInput
  or: [CityFiltersInput]
  postalCode: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CityInput {
  label: String
  postalCode: String
}

type CityRelationResponseCollection {
  data: [CityEntity!]!
}

type Client {
  contract: ContractEntityResponse
  createdAt: DateTime
  firstname: String!
  lastname: String!
  mail: String
  phone: String!
  profile: ProfileEntityResponse
  updatedAt: DateTime
}

type ClientEntity {
  attributes: Client
  id: ID
}

type ClientEntityResponse {
  data: ClientEntity
}

type ClientEntityResponseCollection {
  data: [ClientEntity!]!
  meta: ResponseCollectionMeta!
}

input ClientFiltersInput {
  and: [ClientFiltersInput]
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  firstname: StringFilterInput
  id: IDFilterInput
  lastname: StringFilterInput
  mail: StringFilterInput
  not: ClientFiltersInput
  or: [ClientFiltersInput]
  phone: StringFilterInput
  profile: ProfileFiltersInput
  updatedAt: DateTimeFilterInput
}

input ClientInput {
  contract: ID
  firstname: String
  lastname: String
  mail: String
  phone: String
  profile: ID
}

type ClientType {
  createdAt: DateTime
  type: String
  updatedAt: DateTime
}

type ClientTypeEntity {
  attributes: ClientType
  id: ID
}

type ClientTypeEntityResponse {
  data: ClientTypeEntity
}

type ClientTypeEntityResponseCollection {
  data: [ClientTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input ClientTypeFiltersInput {
  and: [ClientTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ClientTypeFiltersInput
  or: [ClientTypeFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ClientTypeInput {
  type: String
}

type ComponentLinksCalendar {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksContactUs {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksEvents {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksExternal {
  externalLink: String
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksFrees {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksMap {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksNews {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksQuizzes {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksRecycling {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksRequest {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ComponentLinksTips {
  id: ID!
  isDisplayed: Boolean!
  name: String
  picto: UploadFileEntityResponse
}

type ConfidentialitySubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  link: String
  name: String!
  updatedAt: DateTime
}

type ConfidentialitySubServiceEntity {
  attributes: ConfidentialitySubService
  id: ID
}

type ConfidentialitySubServiceEntityResponse {
  data: ConfidentialitySubServiceEntity
}

type ConfidentialitySubServiceEntityResponseCollection {
  data: [ConfidentialitySubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input ConfidentialitySubServiceFiltersInput {
  and: [ConfidentialitySubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  link: StringFilterInput
  name: StringFilterInput
  not: ConfidentialitySubServiceFiltersInput
  or: [ConfidentialitySubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ConfidentialitySubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  link: String
  name: String
}

type ContactUsSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  label: String!
  link: String
  name: String!
  updatedAt: DateTime
}

type ContactUsSubServiceEntity {
  attributes: ContactUsSubService
  id: ID
}

type ContactUsSubServiceEntityResponse {
  data: ContactUsSubServiceEntity
}

type ContactUsSubServiceEntityResponseCollection {
  data: [ContactUsSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactUsSubServiceFiltersInput {
  and: [ContactUsSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  label: StringFilterInput
  link: StringFilterInput
  name: StringFilterInput
  not: ContactUsSubServiceFiltersInput
  or: [ContactUsSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ContactUsSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  label: String
  link: String
  name: String
}

type ContentTypeDTO {
  description: String!
  name: String!
  subServiceId: ID!
  type: String!
}

type Contract {
  ccap: Int
  clear: Int
  clientName: String
  contactClient: ClientEntityResponse
  contractCustomization: ContractCustomizationEntityResponse
  contractMenu: ContractMenuEntityResponse
  createdAt: DateTime
  editorialService: EditorialServiceEntityResponse
  label: String!
  recyclingGuideService: RecyclingGuideServiceEntityResponse
  requestService: RequestServiceEntityResponse
  siret: Long
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  territory: TerritoryEntityResponse
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type ContractCustomization {
  contract: ContractEntityResponse
  createdAt: DateTime
  footer: FooterEntityResponse
  homepage: HomepageEntityResponse
  updatedAt: DateTime
}

type ContractCustomizationEntity {
  attributes: ContractCustomization
  id: ID
}

type ContractCustomizationEntityResponse {
  data: ContractCustomizationEntity
}

type ContractCustomizationEntityResponseCollection {
  data: [ContractCustomizationEntity!]!
  meta: ResponseCollectionMeta!
}

input ContractCustomizationFiltersInput {
  and: [ContractCustomizationFiltersInput]
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  footer: FooterFiltersInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: ContractCustomizationFiltersInput
  or: [ContractCustomizationFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ContractCustomizationInput {
  contract: ID
  footer: ID
  homepage: ID
}

type ContractEntity {
  attributes: Contract
  id: ID
}

type ContractEntityResponse {
  data: ContractEntity
}

type ContractEntityResponseCollection {
  data: [ContractEntity!]!
  meta: ResponseCollectionMeta!
}

input ContractFiltersInput {
  and: [ContractFiltersInput]
  ccap: IntFilterInput
  clear: IntFilterInput
  clientName: StringFilterInput
  contactClient: ClientFiltersInput
  contractCustomization: ContractCustomizationFiltersInput
  contractMenu: ContractMenuFiltersInput
  createdAt: DateTimeFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  label: StringFilterInput
  not: ContractFiltersInput
  or: [ContractFiltersInput]
  recyclingGuideService: RecyclingGuideServiceFiltersInput
  requestService: RequestServiceFiltersInput
  siret: LongFilterInput
  tags: TagFiltersInput
  territory: TerritoryFiltersInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input ContractInput {
  ccap: Int
  clear: Int
  clientName: String
  contactClient: ID
  contractCustomization: ID
  contractMenu: ID
  editorialService: ID
  label: String
  recyclingGuideService: ID
  requestService: ID
  siret: Long
  tags: [ID]
  territory: ID
  users: [ID]
}

type ContractMenu {
  contract: ContractEntityResponse
  createdAt: DateTime
  serviceLinks: [ContractMenuServiceLinksDynamicZone]
  updatedAt: DateTime
}

type ContractMenuEntity {
  attributes: ContractMenu
  id: ID
}

type ContractMenuEntityResponse {
  data: ContractMenuEntity
}

type ContractMenuEntityResponseCollection {
  data: [ContractMenuEntity!]!
  meta: ResponseCollectionMeta!
}

input ContractMenuFiltersInput {
  and: [ContractMenuFiltersInput]
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ContractMenuFiltersInput
  or: [ContractMenuFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ContractMenuInput {
  contract: ID
  serviceLinks: [ContractMenuServiceLinksDynamicZoneInput!]
}

union ContractMenuServiceLinksDynamicZone =
    ComponentLinksCalendar
  | ComponentLinksContactUs
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksMap
  | ComponentLinksNews
  | ComponentLinksQuizzes
  | ComponentLinksRecycling
  | ComponentLinksRequest
  | ComponentLinksTips
  | Error

scalar ContractMenuServiceLinksDynamicZoneInput

type ContractPayload {
  contractId: ID
}

type CookiesSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  link: String
  name: String!
  updatedAt: DateTime
}

type CookiesSubServiceEntity {
  attributes: CookiesSubService
  id: ID
}

type CookiesSubServiceEntityResponse {
  data: CookiesSubServiceEntity
}

type CookiesSubServiceEntityResponseCollection {
  data: [CookiesSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input CookiesSubServiceFiltersInput {
  and: [CookiesSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  link: StringFilterInput
  name: StringFilterInput
  not: CookiesSubServiceFiltersInput
  or: [CookiesSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input CookiesSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  link: String
  name: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type DescriptionService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type DescriptionServiceEntity {
  attributes: DescriptionService
  id: ID
}

type DescriptionServiceEntityResponse {
  data: DescriptionServiceEntity
}

type DescriptionServiceEntityResponseCollection {
  data: [DescriptionServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input DescriptionServiceFiltersInput {
  and: [DescriptionServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: DescriptionServiceFiltersInput
  or: [DescriptionServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input DescriptionServiceInput {
  audienceTypes: [ID]
  name: String
}

type Document {
  createdAt: DateTime
  document: UploadFileEntityResponse!
  event: EventEntityResponse
  name: String!
  updatedAt: DateTime
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  createdAt: DateTimeFilterInput
  event: EventFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  document: ID
  event: ID
  name: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_FOOTER_ACCESSIBILITYLEVEL {
  conform
  not_conform
  partially_conform
}

type EditoBlock {
  createdAt: DateTime
  displayBlock: Boolean!
  editoContents(
    filters: EditoContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EditoContentRelationResponseCollection
  homepage: HomepageEntityResponse
  titleContent: String!
  updatedAt: DateTime
}

type EditoBlockDTO {
  displayBlock: Boolean!
  editoContents: [EditoContentDTO]
  id: ID!
  titleContent: String!
}

type EditoBlockEntity {
  attributes: EditoBlock
  id: ID
}

type EditoBlockEntityResponse {
  data: EditoBlockEntity
}

type EditoBlockEntityResponseCollection {
  data: [EditoBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input EditoBlockFiltersInput {
  and: [EditoBlockFiltersInput]
  createdAt: DateTimeFilterInput
  displayBlock: BooleanFilterInput
  editoContents: EditoContentFiltersInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: EditoBlockFiltersInput
  or: [EditoBlockFiltersInput]
  titleContent: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EditoBlockInput {
  displayBlock: Boolean
  editoContents: [ID]
  homepage: ID
  titleContent: String
}

type EditoContent {
  createdAt: DateTime
  editoBlock: EditoBlockEntityResponse
  editorialService: EditorialServiceEntityResponse
  event: EventEntityResponse
  freeContent: FreeContentEntityResponse
  news: NewEntityResponse
  quiz: QuizEntityResponse
  tip: TipEntityResponse
  updatedAt: DateTime
}

type EditoContentDTO {
  attributes: Attributes!
  contentType: String!
  id: ID!
  typeName: String!
}

type EditoContentEntity {
  attributes: EditoContent
  id: ID
}

type EditoContentEntityResponse {
  data: EditoContentEntity
}

type EditoContentEntityResponseCollection {
  data: [EditoContentEntity!]!
  meta: ResponseCollectionMeta!
}

input EditoContentFiltersInput {
  and: [EditoContentFiltersInput]
  createdAt: DateTimeFilterInput
  editoBlock: EditoBlockFiltersInput
  editorialService: EditorialServiceFiltersInput
  event: EventFiltersInput
  freeContent: FreeContentFiltersInput
  id: IDFilterInput
  news: NewFiltersInput
  not: EditoContentFiltersInput
  or: [EditoContentFiltersInput]
  quiz: QuizFiltersInput
  tip: TipFiltersInput
  updatedAt: DateTimeFilterInput
}

input EditoContentInput {
  editoBlock: ID
  editorialService: ID
  event: ID
  freeContent: ID
  news: ID
  quiz: ID
  tip: ID
}

type EditoContentRelationResponseCollection {
  data: [EditoContentEntity!]!
}

type EditorialService {
  accessibilitySubService: AccessibilitySubServiceEntityResponse
  cguSubService: CguSubServiceEntityResponse
  channelType: ChannelTypeEntityResponse
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityRelationResponseCollection
  confidentialitySubService: ConfidentialitySubServiceEntityResponse
  contactUsSubService: ContactUsSubServiceEntityResponse
  contract: ContractEntityResponse
  cookiesSubService: CookiesSubServiceEntityResponse
  createdAt: DateTime
  editoContents(
    filters: EditoContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EditoContentRelationResponseCollection
  eventSubService: EventSubServiceEntityResponse
  freeContentSubServices(
    filters: FreeContentSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): FreeContentSubServiceRelationResponseCollection
  newsSubService: NewsSubServiceEntityResponse
  quizSubService: QuizSubServiceEntityResponse
  tipSubService: TipSubServiceEntityResponse
  topContents(
    filters: TopContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TopContentRelationResponseCollection
  updatedAt: DateTime
}

type EditorialServiceEntity {
  attributes: EditorialService
  id: ID
  serviceId: ID
}

type EditorialServiceEntityResponse {
  data: EditorialServiceEntity
}

type EditorialServiceEntityResponseCollection {
  data: [EditorialServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input EditorialServiceFiltersInput {
  accessibilitySubService: AccessibilitySubServiceFiltersInput
  and: [EditorialServiceFiltersInput]
  cguSubService: CguSubServiceFiltersInput
  channelType: ChannelTypeFiltersInput
  cities: CityFiltersInput
  confidentialitySubService: ConfidentialitySubServiceFiltersInput
  contactUsSubService: ContactUsSubServiceFiltersInput
  contract: ContractFiltersInput
  cookiesSubService: CookiesSubServiceFiltersInput
  createdAt: DateTimeFilterInput
  editoContents: EditoContentFiltersInput
  eventSubService: EventSubServiceFiltersInput
  freeContentSubServices: FreeContentSubServiceFiltersInput
  id: IDFilterInput
  newsSubService: NewsSubServiceFiltersInput
  not: EditorialServiceFiltersInput
  or: [EditorialServiceFiltersInput]
  quizSubService: QuizSubServiceFiltersInput
  tipSubService: TipSubServiceFiltersInput
  topContents: TopContentFiltersInput
  updatedAt: DateTimeFilterInput
}

input EditorialServiceInput {
  accessibilitySubService: ID
  cguSubService: ID
  channelType: ID
  cities: [ID]
  confidentialitySubService: ID
  contactUsSubService: ID
  contract: ID
  cookiesSubService: ID
  editoContents: [ID]
  eventSubService: ID
  freeContentSubServices: [ID]
  newsSubService: ID
  quizSubService: ID
  tipSubService: ID
  topContents: [ID]
}

type Epci {
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityRelationResponseCollection
  createdAt: DateTime
  name: String
  territories(
    filters: TerritoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TerritoryRelationResponseCollection
  updatedAt: DateTime
}

type EpciEntity {
  attributes: Epci
  id: ID
}

type EpciEntityResponse {
  data: EpciEntity
}

type EpciEntityResponseCollection {
  data: [EpciEntity!]!
  meta: ResponseCollectionMeta!
}

input EpciFiltersInput {
  and: [EpciFiltersInput]
  cities: CityFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: EpciFiltersInput
  or: [EpciFiltersInput]
  territories: TerritoryFiltersInput
  updatedAt: DateTimeFilterInput
}

input EpciInput {
  cities: [ID]
  name: String
  territories: [ID]
}

type EpciRelationResponseCollection {
  data: [EpciEntity!]!
}

type Error {
  code: String!
  message: String
}

type Event {
  createdAt: DateTime
  description: String!
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): DocumentRelationResponseCollection
  editoContent: EditoContentEntityResponse
  eventSubService: EventSubServiceEntityResponse
  events(
    filters: EventFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): EventRelationResponseCollection
  publishedAt: DateTime
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  title: String!
  topContent: TopContentEntityResponse
  updatedAt: DateTime
}

type EventEntity {
  attributes: Event
  id: ID
}

type EventEntityResponse {
  data: EventEntity
}

type EventEntityResponseCollection {
  data: [EventEntity!]!
  meta: ResponseCollectionMeta!
}

input EventFiltersInput {
  and: [EventFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documents: DocumentFiltersInput
  editoContent: EditoContentFiltersInput
  eventSubService: EventSubServiceFiltersInput
  events: EventFiltersInput
  id: IDFilterInput
  not: EventFiltersInput
  or: [EventFiltersInput]
  publishedAt: DateTimeFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  topContent: TopContentFiltersInput
  updatedAt: DateTimeFilterInput
}

input EventInput {
  description: String
  documents: [ID]
  editoContent: ID
  eventSubService: ID
  events: [ID]
  publishedAt: DateTime
  tags: [ID]
  title: String
  topContent: ID
}

type EventRelationResponseCollection {
  data: [EventEntity!]!
}

type EventSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  events(
    filters: EventFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): EventRelationResponseCollection
  isActivated: Boolean!
  name: String!
  updatedAt: DateTime
}

type EventSubServiceEntity {
  attributes: EventSubService
  id: ID
}

type EventSubServiceEntityResponse {
  data: EventSubServiceEntity
}

type EventSubServiceEntityResponseCollection {
  data: [EventSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input EventSubServiceFiltersInput {
  and: [EventSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  events: EventFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: EventSubServiceFiltersInput
  or: [EventSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input EventSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  events: [ID]
  isActivated: Boolean
  name: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type Footer {
  accessibilityLevel: ENUM_FOOTER_ACCESSIBILITYLEVEL
  accessibilitySubService: AccessibilitySubServiceEntityResponse
  cguSubService: CguSubServiceEntityResponse
  confidentialitySubService: ConfidentialitySubServiceEntityResponse
  contactUsSubService: ContactUsSubServiceEntityResponse
  contractCustomization: ContractCustomizationEntityResponse
  cookiesSubService: CookiesSubServiceEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type FooterEntity {
  attributes: Footer
  id: ID
}

type FooterEntityResponse {
  data: FooterEntity
}

type FooterEntityResponseCollection {
  data: [FooterEntity!]!
  meta: ResponseCollectionMeta!
}

input FooterFiltersInput {
  accessibilityLevel: StringFilterInput
  accessibilitySubService: AccessibilitySubServiceFiltersInput
  and: [FooterFiltersInput]
  cguSubService: CguSubServiceFiltersInput
  confidentialitySubService: ConfidentialitySubServiceFiltersInput
  contactUsSubService: ContactUsSubServiceFiltersInput
  contractCustomization: ContractCustomizationFiltersInput
  cookiesSubService: CookiesSubServiceFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: FooterFiltersInput
  or: [FooterFiltersInput]
  updatedAt: DateTimeFilterInput
}

input FooterInput {
  accessibilityLevel: ENUM_FOOTER_ACCESSIBILITYLEVEL
  accessibilitySubService: ID
  cguSubService: ID
  confidentialitySubService: ID
  contactUsSubService: ID
  contractCustomization: ID
  cookiesSubService: ID
}

type FreeContent {
  body: String
  createdAt: DateTime
  editoContent: EditoContentEntityResponse
  freeContentSubService: FreeContentSubServiceEntityResponse
  image: UploadFileEntityResponse
  publishedAt: DateTime
  shortDescription: String
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  title: String
  updatedAt: DateTime
}

type FreeContentEntity {
  attributes: FreeContent
  id: ID
}

type FreeContentEntityResponse {
  data: FreeContentEntity
}

type FreeContentEntityResponseCollection {
  data: [FreeContentEntity!]!
  meta: ResponseCollectionMeta!
}

input FreeContentFiltersInput {
  and: [FreeContentFiltersInput]
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  editoContent: EditoContentFiltersInput
  freeContentSubService: FreeContentSubServiceFiltersInput
  id: IDFilterInput
  not: FreeContentFiltersInput
  or: [FreeContentFiltersInput]
  publishedAt: DateTimeFilterInput
  shortDescription: StringFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FreeContentInput {
  body: String
  editoContent: ID
  freeContentSubService: ID
  image: ID
  publishedAt: DateTime
  shortDescription: String
  tags: [ID]
  title: String
}

type FreeContentRelationResponseCollection {
  data: [FreeContentEntity!]!
}

type FreeContentSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  freeContents(
    filters: FreeContentFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): FreeContentRelationResponseCollection
  isActivated: Boolean!
  name: String!
  updatedAt: DateTime
}

type FreeContentSubServiceEntity {
  attributes: FreeContentSubService
  id: ID
}

type FreeContentSubServiceEntityResponse {
  data: FreeContentSubServiceEntity
}

type FreeContentSubServiceEntityResponseCollection {
  data: [FreeContentSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input FreeContentSubServiceFiltersInput {
  and: [FreeContentSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  freeContents: FreeContentFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: FreeContentSubServiceFiltersInput
  or: [FreeContentSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input FreeContentSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  freeContents: [ID]
  isActivated: Boolean
  name: String
}

type FreeContentSubServiceRelationResponseCollection {
  data: [FreeContentSubServiceEntity!]!
}

union GenericMorph =
    AccessibilitySubService
  | AudienceType
  | CguSubService
  | ChannelType
  | City
  | Client
  | ClientType
  | ComponentLinksCalendar
  | ComponentLinksContactUs
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksMap
  | ComponentLinksNews
  | ComponentLinksQuizzes
  | ComponentLinksRecycling
  | ComponentLinksRequest
  | ComponentLinksTips
  | ConfidentialitySubService
  | ContactUsSubService
  | Contract
  | ContractCustomization
  | ContractMenu
  | CookiesSubService
  | DescriptionService
  | Document
  | EditoBlock
  | EditoContent
  | EditorialService
  | Epci
  | Event
  | EventSubService
  | Footer
  | FreeContent
  | FreeContentSubService
  | Global
  | Homepage
  | I18NLocale
  | KeyMetric
  | New
  | NewsSubService
  | Profile
  | Quiz
  | QuizAndTipsBlock
  | QuizSubService
  | RecyclingGuideBlock
  | RecyclingGuideService
  | RequestService
  | SearchEngineBlock
  | ServicesBlock
  | Tag
  | Territory
  | TerritoryType
  | Tip
  | TipSubService
  | TopContent
  | TopContentBlock
  | UploadFile
  | UploadFolder
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser

type Global {
  createdAt: DateTime
  favicon: UploadFileEntityResponse
  siteDescription: String!
  siteName: String!
  updatedAt: DateTime
}

type GlobalEntity {
  attributes: Global
  id: ID
}

type GlobalEntityResponse {
  data: GlobalEntity
}

input GlobalInput {
  favicon: ID
  siteDescription: String
  siteName: String
}

type Homepage {
  contractCustomization: ContractCustomizationEntityResponse
  createdAt: DateTime
  editoBlock: EditoBlockEntityResponse
  quizAndTipsBlock: QuizAndTipsBlockEntityResponse
  recyclingGuideBlock: RecyclingGuideBlockEntityResponse
  searchEngineBlock: SearchEngineBlockEntityResponse
  servicesBlock: ServicesBlockEntityResponse
  topContentBlock: TopContentBlockEntityResponse
  updatedAt: DateTime
}

type HomepageEntity {
  attributes: Homepage
  id: ID
}

type HomepageEntityResponse {
  data: HomepageEntity
}

type HomepageEntityResponseCollection {
  data: [HomepageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomepageFiltersInput {
  and: [HomepageFiltersInput]
  contractCustomization: ContractCustomizationFiltersInput
  createdAt: DateTimeFilterInput
  editoBlock: EditoBlockFiltersInput
  id: IDFilterInput
  not: HomepageFiltersInput
  or: [HomepageFiltersInput]
  quizAndTipsBlock: QuizAndTipsBlockFiltersInput
  recyclingGuideBlock: RecyclingGuideBlockFiltersInput
  searchEngineBlock: SearchEngineBlockFiltersInput
  servicesBlock: ServicesBlockFiltersInput
  topContentBlock: TopContentBlockFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomepageInput {
  contractCustomization: ID
  editoBlock: ID
  quizAndTipsBlock: ID
  recyclingGuideBlock: ID
  searchEngineBlock: ID
  servicesBlock: ID
  topContentBlock: ID
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type KeyMetric {
  createdAt: DateTime
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type KeyMetricEntity {
  attributes: KeyMetric
  id: ID
}

type KeyMetricEntityResponse {
  data: KeyMetricEntity
}

type KeyMetricEntityResponseCollection {
  data: [KeyMetricEntity!]!
  meta: ResponseCollectionMeta!
}

input KeyMetricFiltersInput {
  and: [KeyMetricFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: KeyMetricFiltersInput
  or: [KeyMetricFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input KeyMetricInput {
  publishedAt: DateTime
  title: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """
  Change user password. Confirm with the current password.
  """
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  createAccessibilitySubService(
    data: AccessibilitySubServiceInput!
  ): AccessibilitySubServiceEntityResponse
  createAudienceType(data: AudienceTypeInput!): AudienceTypeEntityResponse
  createCguSubService(data: CguSubServiceInput!): CguSubServiceEntityResponse
  createChannelType(data: ChannelTypeInput!): ChannelTypeEntityResponse
  createCity(data: CityInput!): CityEntityResponse
  createClient(data: ClientInput!): ClientEntityResponse
  createClientType(data: ClientTypeInput!): ClientTypeEntityResponse
  createConfidentialitySubService(
    data: ConfidentialitySubServiceInput!
  ): ConfidentialitySubServiceEntityResponse
  createContactUsSubService(
    data: ContactUsSubServiceInput!
  ): ContactUsSubServiceEntityResponse
  createContentTypeForContractId(
    contractId: ID
    description: String
    name: String
  ): FreeContentSubServiceEntity
  createContract(data: ContractInput!): ContractEntityResponse
  createContractCustomization(
    data: ContractCustomizationInput!
  ): ContractCustomizationEntityResponse
  createContractMenu(data: ContractMenuInput!): ContractMenuEntityResponse
  createCookiesSubService(
    data: CookiesSubServiceInput!
  ): CookiesSubServiceEntityResponse
  createDescriptionService(
    data: DescriptionServiceInput!
  ): DescriptionServiceEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createEditoBlock(data: EditoBlockInput!): EditoBlockEntityResponse
  createEditoContent(data: EditoContentInput!): EditoContentEntityResponse
  createEditorialService(
    data: EditorialServiceInput!
  ): EditorialServiceEntityResponse
  createEditorialServiceForContract(
    contractId: ID
    endDate: DateTime
    name: String
    startDate: DateTime
  ): EditorialServiceEntity
  createEmptyContract(name: String): ContractPayload
  createEpci(data: EpciInput!): EpciEntityResponse
  createEvent(data: EventInput!): EventEntityResponse
  createEventSubService(
    data: EventSubServiceInput!
  ): EventSubServiceEntityResponse
  createFooter(data: FooterInput!): FooterEntityResponse
  createFreeContent(data: FreeContentInput!): FreeContentEntityResponse
  createFreeContentSubService(
    data: FreeContentSubServiceInput!
  ): FreeContentSubServiceEntityResponse
  createHomepage(data: HomepageInput!): HomepageEntityResponse
  createKeyMetric(data: KeyMetricInput!): KeyMetricEntityResponse
  createNew(data: NewInput!): NewEntityResponse
  createNewsSubService(data: NewsSubServiceInput!): NewsSubServiceEntityResponse
  createProfile(data: ProfileInput!): ProfileEntityResponse
  createQuiz(data: QuizInput!): QuizEntityResponse
  createQuizAndTipsBlock(
    data: QuizAndTipsBlockInput!
  ): QuizAndTipsBlockEntityResponse
  createQuizSubService(data: QuizSubServiceInput!): QuizSubServiceEntityResponse
  createRecyclingGuideBlock(
    data: RecyclingGuideBlockInput!
  ): RecyclingGuideBlockEntityResponse
  createRecyclingGuideService(
    data: RecyclingGuideServiceInput!
  ): RecyclingGuideServiceEntityResponse
  createRequestService(data: RequestServiceInput!): RequestServiceEntityResponse
  createRequestServiceForContract(
    contractId: ID
    endDate: Date
    startDate: Date
  ): RequestServiceEntity
  createSearchEngineBlock(
    data: SearchEngineBlockInput!
  ): SearchEngineBlockEntityResponse
  createServicesBlock(data: ServicesBlockInput!): ServicesBlockEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createTerritory(data: TerritoryInput!): TerritoryEntityResponse
  createTerritoryType(data: TerritoryTypeInput!): TerritoryTypeEntityResponse
  createTip(data: TipInput!): TipEntityResponse
  createTipSubService(data: TipSubServiceInput!): TipSubServiceEntityResponse
  createTopContent(data: TopContentInput!): TopContentEntityResponse
  createTopContentBlock(
    data: TopContentBlockInput!
  ): TopContentBlockEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """
  Create a new role
  """
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!
  deleteAccessibilitySubService(id: ID!): AccessibilitySubServiceEntityResponse
  deleteAudienceType(id: ID!): AudienceTypeEntityResponse
  deleteCguSubService(id: ID!): CguSubServiceEntityResponse
  deleteChannelType(id: ID!): ChannelTypeEntityResponse
  deleteCity(id: ID!): CityEntityResponse
  deleteClient(id: ID!): ClientEntityResponse
  deleteClientType(id: ID!): ClientTypeEntityResponse
  deleteConfidentialitySubService(
    id: ID!
  ): ConfidentialitySubServiceEntityResponse
  deleteContactUsSubService(id: ID!): ContactUsSubServiceEntityResponse
  deleteContract(id: ID!): ContractEntityResponse
  deleteContractCustomization(id: ID!): ContractCustomizationEntityResponse
  deleteContractMenu(id: ID!): ContractMenuEntityResponse
  deleteCookiesSubService(id: ID!): CookiesSubServiceEntityResponse
  deleteDescriptionService(id: ID!): DescriptionServiceEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteEditoBlock(id: ID!): EditoBlockEntityResponse
  deleteEditoContent(id: ID!): EditoContentEntityResponse
  deleteEditorialService(id: ID!): EditorialServiceEntityResponse
  deleteEpci(id: ID!): EpciEntityResponse
  deleteEvent(id: ID!): EventEntityResponse
  deleteEventSubService(id: ID!): EventSubServiceEntityResponse
  deleteFooter(id: ID!): FooterEntityResponse
  deleteFreeContent(id: ID!): FreeContentEntityResponse
  deleteFreeContentSubService(id: ID!): FreeContentSubServiceEntityResponse
  deleteGlobal: GlobalEntityResponse
  deleteHomepage(id: ID!): HomepageEntityResponse
  deleteKeyMetric(id: ID!): KeyMetricEntityResponse
  deleteNew(id: ID!): NewEntityResponse
  deleteNewsSubService(id: ID!): NewsSubServiceEntityResponse
  deleteProfile(id: ID!): ProfileEntityResponse
  deleteQuiz(id: ID!): QuizEntityResponse
  deleteQuizAndTipsBlock(id: ID!): QuizAndTipsBlockEntityResponse
  deleteQuizSubService(id: ID!): QuizSubServiceEntityResponse
  deleteRecyclingGuideBlock(id: ID!): RecyclingGuideBlockEntityResponse
  deleteRecyclingGuideService(id: ID!): RecyclingGuideServiceEntityResponse
  deleteRequestService(id: ID!): RequestServiceEntityResponse
  deleteSearchEngineBlock(id: ID!): SearchEngineBlockEntityResponse
  deleteServicesBlock(id: ID!): ServicesBlockEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteTerritory(id: ID!): TerritoryEntityResponse
  deleteTerritoryType(id: ID!): TerritoryTypeEntityResponse
  deleteTip(id: ID!): TipEntityResponse
  deleteTipSubService(id: ID!): TipSubServiceEntityResponse
  deleteTopContent(id: ID!): TopContentEntityResponse
  deleteTopContentBlock(id: ID!): TopContentBlockEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(
    field: String
    files: [Upload]!
    ref: String
    refId: ID
  ): [UploadFileEntityResponse]!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(
    code: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload
  updateAccessibilitySubService(
    data: AccessibilitySubServiceInput!
    id: ID!
  ): AccessibilitySubServiceEntityResponse
  updateAudienceType(
    data: AudienceTypeInput!
    id: ID!
  ): AudienceTypeEntityResponse
  updateCguSubService(
    data: CguSubServiceInput!
    id: ID!
  ): CguSubServiceEntityResponse
  updateChannelType(data: ChannelTypeInput!, id: ID!): ChannelTypeEntityResponse
  updateCity(data: CityInput!, id: ID!): CityEntityResponse
  updateClient(data: ClientInput!, id: ID!): ClientEntityResponse
  updateClientType(data: ClientTypeInput!, id: ID!): ClientTypeEntityResponse
  updateConfidentialitySubService(
    data: ConfidentialitySubServiceInput!
    id: ID!
  ): ConfidentialitySubServiceEntityResponse
  updateContactUsSubService(
    data: ContactUsSubServiceInput!
    id: ID!
  ): ContactUsSubServiceEntityResponse
  updateContract(data: ContractInput!, id: ID!): ContractEntityResponse
  updateContractCustomization(
    data: ContractCustomizationInput!
    id: ID!
  ): ContractCustomizationEntityResponse
  updateContractMenu(
    data: ContractMenuInput!
    id: ID!
  ): ContractMenuEntityResponse
  updateCookiesSubService(
    data: CookiesSubServiceInput!
    id: ID!
  ): CookiesSubServiceEntityResponse
  updateDescriptionService(
    data: DescriptionServiceInput!
    id: ID!
  ): DescriptionServiceEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateEditoBlock(data: EditoBlockInput!, id: ID!): EditoBlockEntityResponse
  updateEditoContent(
    data: EditoContentInput!
    id: ID!
  ): EditoContentEntityResponse
  updateEditorialService(
    data: EditorialServiceInput!
    id: ID!
  ): EditorialServiceEntityResponse
  updateEpci(data: EpciInput!, id: ID!): EpciEntityResponse
  updateEvent(data: EventInput!, id: ID!): EventEntityResponse
  updateEventSubService(
    data: EventSubServiceInput!
    id: ID!
  ): EventSubServiceEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateFooter(data: FooterInput!, id: ID!): FooterEntityResponse
  updateFreeContent(data: FreeContentInput!, id: ID!): FreeContentEntityResponse
  updateFreeContentSubService(
    data: FreeContentSubServiceInput!
    id: ID!
  ): FreeContentSubServiceEntityResponse
  updateGlobal(data: GlobalInput!): GlobalEntityResponse
  updateHomepage(data: HomepageInput!, id: ID!): HomepageEntityResponse
  updateKeyMetric(data: KeyMetricInput!, id: ID!): KeyMetricEntityResponse
  updateNew(data: NewInput!, id: ID!): NewEntityResponse
  updateNewsSubService(
    data: NewsSubServiceInput!
    id: ID!
  ): NewsSubServiceEntityResponse
  updateProfile(data: ProfileInput!, id: ID!): ProfileEntityResponse
  updateQuiz(data: QuizInput!, id: ID!): QuizEntityResponse
  updateQuizAndTipsBlock(
    data: QuizAndTipsBlockInput!
    id: ID!
  ): QuizAndTipsBlockEntityResponse
  updateQuizSubService(
    data: QuizSubServiceInput!
    id: ID!
  ): QuizSubServiceEntityResponse
  updateRecyclingGuideBlock(
    data: RecyclingGuideBlockInput!
    id: ID!
  ): RecyclingGuideBlockEntityResponse
  updateRecyclingGuideService(
    data: RecyclingGuideServiceInput!
    id: ID!
  ): RecyclingGuideServiceEntityResponse
  updateRequestService(
    data: RequestServiceInput!
    id: ID!
  ): RequestServiceEntityResponse
  updateSearchEngineBlock(
    data: SearchEngineBlockInput!
    id: ID!
  ): SearchEngineBlockEntityResponse
  updateServicesBlock(
    data: ServicesBlockInput!
    id: ID!
  ): ServicesBlockEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateTerritory(data: TerritoryInput!, id: ID!): TerritoryEntityResponse
  updateTerritoryType(
    data: TerritoryTypeInput!
    id: ID!
  ): TerritoryTypeEntityResponse
  updateTip(data: TipInput!, id: ID!): TipEntityResponse
  updateTipSubService(
    data: TipSubServiceInput!
    id: ID!
  ): TipSubServiceEntityResponse
  updateTopContent(data: TopContentInput!, id: ID!): TopContentEntityResponse
  updateTopContentBlock(
    data: TopContentBlockInput!
    id: ID!
  ): TopContentBlockEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(
    data: UploadFolderInput!
    id: ID!
  ): UploadFolderEntityResponse

  """
  Update an existing role
  """
  updateUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
    id: ID!
  ): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(
    data: UsersPermissionsUserInput!
    id: ID!
  ): UsersPermissionsUserEntityResponse!
  upload(
    field: String
    file: Upload!
    info: FileInfoInput
    ref: String
    refId: ID
  ): UploadFileEntityResponse!
}

type New {
  audiences(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  channels(
    filters: ChannelTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ChannelTypeRelationResponseCollection
  createdAt: DateTime
  editoContent: EditoContentEntityResponse
  image: UploadFileEntityResponse
  newsSubService: NewsSubServiceEntityResponse
  publishedAt: DateTime
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  title: String!
  topContent: TopContentEntityResponse
  updatedAt: DateTime
  video: UploadFileEntityResponse
}

type NewEntity {
  attributes: New
  id: ID
}

type NewEntityResponse {
  data: NewEntity
}

type NewEntityResponseCollection {
  data: [NewEntity!]!
  meta: ResponseCollectionMeta!
}

input NewFiltersInput {
  and: [NewFiltersInput]
  audiences: AudienceTypeFiltersInput
  channels: ChannelTypeFiltersInput
  createdAt: DateTimeFilterInput
  editoContent: EditoContentFiltersInput
  id: IDFilterInput
  newsSubService: NewsSubServiceFiltersInput
  not: NewFiltersInput
  or: [NewFiltersInput]
  publishedAt: DateTimeFilterInput
  tags: TagFiltersInput
  title: StringFilterInput
  topContent: TopContentFiltersInput
  updatedAt: DateTimeFilterInput
}

input NewInput {
  audiences: [ID]
  channels: [ID]
  editoContent: ID
  image: ID
  newsSubService: ID
  publishedAt: DateTime
  tags: [ID]
  title: String
  topContent: ID
  video: ID
}

type NewRelationResponseCollection {
  data: [NewEntity!]!
}

type NewsSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  name: String!
  news(
    filters: NewFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): NewRelationResponseCollection
  updatedAt: DateTime
}

type NewsSubServiceEntity {
  attributes: NewsSubService
  id: ID
}

type NewsSubServiceEntityResponse {
  data: NewsSubServiceEntity
}

type NewsSubServiceEntityResponseCollection {
  data: [NewsSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input NewsSubServiceFiltersInput {
  and: [NewsSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  news: NewFiltersInput
  not: NewsSubServiceFiltersInput
  or: [NewsSubServiceFiltersInput]
  updatedAt: DateTimeFilterInput
}

input NewsSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  name: String
  news: [ID]
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Profile {
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type ProfileEntity {
  attributes: Profile
  id: ID
}

type ProfileEntityResponse {
  data: ProfileEntity
}

type ProfileEntityResponseCollection {
  data: [ProfileEntity!]!
  meta: ResponseCollectionMeta!
}

input ProfileFiltersInput {
  and: [ProfileFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ProfileFiltersInput
  or: [ProfileFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ProfileInput {
  name: String
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  accessibilitySubService(id: ID): AccessibilitySubServiceEntityResponse
  accessibilitySubServices(
    filters: AccessibilitySubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AccessibilitySubServiceEntityResponseCollection
  audienceType(id: ID): AudienceTypeEntityResponse
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeEntityResponseCollection
  cguSubService(id: ID): CguSubServiceEntityResponse
  cguSubServices(
    filters: CguSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CguSubServiceEntityResponseCollection
  channelType(id: ID): ChannelTypeEntityResponse
  channelTypes(
    filters: ChannelTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ChannelTypeEntityResponseCollection
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityEntityResponseCollection
  city(id: ID): CityEntityResponse
  client(id: ID): ClientEntityResponse
  clientType(id: ID): ClientTypeEntityResponse
  clientTypes(
    filters: ClientTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ClientTypeEntityResponseCollection
  clients(
    filters: ClientFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ClientEntityResponseCollection
  confidentialitySubService(id: ID): ConfidentialitySubServiceEntityResponse
  confidentialitySubServices(
    filters: ConfidentialitySubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ConfidentialitySubServiceEntityResponseCollection
  contactUsSubService(id: ID): ContactUsSubServiceEntityResponse
  contactUsSubServices(
    filters: ContactUsSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContactUsSubServiceEntityResponseCollection
  contract(id: ID): ContractEntityResponse
  contractCustomization(id: ID): ContractCustomizationEntityResponse
  contractCustomizations(
    filters: ContractCustomizationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContractCustomizationEntityResponseCollection
  contractMenu(id: ID): ContractMenuEntityResponse
  contractMenus(
    filters: ContractMenuFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContractMenuEntityResponseCollection
  contracts(
    filters: ContractFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContractEntityResponseCollection
  cookiesSubService(id: ID): CookiesSubServiceEntityResponse
  cookiesSubServices(
    filters: CookiesSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CookiesSubServiceEntityResponseCollection
  countContentPerTag(contractId: ID!): [totalCountPerTag]
  descriptionService(id: ID): DescriptionServiceEntityResponse
  descriptionServices(
    filters: DescriptionServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): DescriptionServiceEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): DocumentEntityResponseCollection
  editoBlock(id: ID): EditoBlockEntityResponse
  editoBlocks(
    filters: EditoBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EditoBlockEntityResponseCollection
  editoContent(id: ID): EditoContentEntityResponse
  editoContents(
    filters: EditoContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EditoContentEntityResponseCollection
  editorialService(id: ID): EditorialServiceEntityResponse
  editorialServices(
    filters: EditorialServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EditorialServiceEntityResponseCollection
  epci(id: ID): EpciEntityResponse
  epcis(
    filters: EpciFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EpciEntityResponseCollection
  event(id: ID): EventEntityResponse
  eventSubService(id: ID): EventSubServiceEntityResponse
  eventSubServices(
    filters: EventSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EventSubServiceEntityResponseCollection
  events(
    filters: EventFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): EventEntityResponseCollection
  footer(id: ID): FooterEntityResponse
  footers(
    filters: FooterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): FooterEntityResponseCollection
  freeContent(id: ID): FreeContentEntityResponse
  freeContentSubService(id: ID): FreeContentSubServiceEntityResponse
  freeContentSubServices(
    filters: FreeContentSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): FreeContentSubServiceEntityResponseCollection
  freeContents(
    filters: FreeContentFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): FreeContentEntityResponseCollection
  getContentTypeDTOs(contractId: ID!): [ContentTypeDTO]
  getEditoBlockDTO(contractId: ID!): EditoBlockDTO
  getEditoContentDTOs(contractId: ID!): [EditoContentDTO]
  getTopContentBlockDTO(contractId: ID!): TopContentBlockDTO
  getTopContentDTOs(contractId: ID!): [TopContentDTO]
  global: GlobalEntityResponse
  homepage(id: ID): HomepageEntityResponse
  homepages(
    filters: HomepageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): HomepageEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  keyMetric(id: ID): KeyMetricEntityResponse
  keyMetrics(
    filters: KeyMetricFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): KeyMetricEntityResponseCollection
  me: UsersPermissionsMe
  new(id: ID): NewEntityResponse
  news(
    filters: NewFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): NewEntityResponseCollection
  newsSubService(id: ID): NewsSubServiceEntityResponse
  newsSubServices(
    filters: NewsSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): NewsSubServiceEntityResponseCollection
  profile(id: ID): ProfileEntityResponse
  profiles(
    filters: ProfileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ProfileEntityResponseCollection
  quiz(id: ID): QuizEntityResponse
  quizAndTipsBlock(id: ID): QuizAndTipsBlockEntityResponse
  quizAndTipsBlocks(
    filters: QuizAndTipsBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): QuizAndTipsBlockEntityResponseCollection
  quizSubService(id: ID): QuizSubServiceEntityResponse
  quizSubServices(
    filters: QuizSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): QuizSubServiceEntityResponseCollection
  quizzes(
    filters: QuizFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): QuizEntityResponseCollection
  recyclingGuideBlock(id: ID): RecyclingGuideBlockEntityResponse
  recyclingGuideBlocks(
    filters: RecyclingGuideBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecyclingGuideBlockEntityResponseCollection
  recyclingGuideService(id: ID): RecyclingGuideServiceEntityResponse
  recyclingGuideServices(
    filters: RecyclingGuideServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RecyclingGuideServiceEntityResponseCollection
  requestService(id: ID): RequestServiceEntityResponse
  requestServices(
    filters: RequestServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): RequestServiceEntityResponseCollection
  searchEngineBlock(id: ID): SearchEngineBlockEntityResponse
  searchEngineBlocks(
    filters: SearchEngineBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): SearchEngineBlockEntityResponseCollection
  servicesBlock(id: ID): ServicesBlockEntityResponse
  servicesBlocks(
    filters: ServicesBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ServicesBlockEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagEntityResponseCollection
  territories(
    filters: TerritoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TerritoryEntityResponseCollection
  territory(id: ID): TerritoryEntityResponse
  territoryType(id: ID): TerritoryTypeEntityResponse
  territoryTypes(
    filters: TerritoryTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TerritoryTypeEntityResponseCollection
  tip(id: ID): TipEntityResponse
  tipSubService(id: ID): TipSubServiceEntityResponse
  tipSubServices(
    filters: TipSubServiceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TipSubServiceEntityResponseCollection
  tips(
    filters: TipFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TipEntityResponseCollection
  topContent(id: ID): TopContentEntityResponse
  topContentBlock(id: ID): TopContentBlockEntityResponse
  topContentBlocks(
    filters: TopContentBlockFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TopContentBlockEntityResponseCollection
  topContents(
    filters: TopContentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TopContentEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
}

type Quiz {
  createdAt: DateTime
  editoContent: EditoContentEntityResponse
  publishedAt: DateTime
  quizSubService: QuizSubServiceEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  title: String
  updatedAt: DateTime
}

type QuizAndTipsBlock {
  createdAt: DateTime
  displayBlock: Boolean!
  displayQuiz: Boolean!
  displayTips: Boolean!
  homepage: HomepageEntityResponse
  quiz: QuizEntityResponse
  tips(
    filters: TipFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TipRelationResponseCollection
  titleContent: String!
  updatedAt: DateTime
}

type QuizAndTipsBlockEntity {
  attributes: QuizAndTipsBlock
  id: ID
}

type QuizAndTipsBlockEntityResponse {
  data: QuizAndTipsBlockEntity
}

type QuizAndTipsBlockEntityResponseCollection {
  data: [QuizAndTipsBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input QuizAndTipsBlockFiltersInput {
  and: [QuizAndTipsBlockFiltersInput]
  createdAt: DateTimeFilterInput
  displayBlock: BooleanFilterInput
  displayQuiz: BooleanFilterInput
  displayTips: BooleanFilterInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: QuizAndTipsBlockFiltersInput
  or: [QuizAndTipsBlockFiltersInput]
  quiz: QuizFiltersInput
  tips: TipFiltersInput
  titleContent: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input QuizAndTipsBlockInput {
  displayBlock: Boolean
  displayQuiz: Boolean
  displayTips: Boolean
  homepage: ID
  quiz: ID
  tips: [ID]
  titleContent: String
}

type QuizEntity {
  attributes: Quiz
  id: ID
}

type QuizEntityResponse {
  data: QuizEntity
}

type QuizEntityResponseCollection {
  data: [QuizEntity!]!
  meta: ResponseCollectionMeta!
}

input QuizFiltersInput {
  and: [QuizFiltersInput]
  createdAt: DateTimeFilterInput
  editoContent: EditoContentFiltersInput
  id: IDFilterInput
  not: QuizFiltersInput
  or: [QuizFiltersInput]
  publishedAt: DateTimeFilterInput
  quizSubService: QuizSubServiceFiltersInput
  tags: TagFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input QuizInput {
  editoContent: ID
  publishedAt: DateTime
  quizSubService: ID
  tags: [ID]
  title: String
}

type QuizRelationResponseCollection {
  data: [QuizEntity!]!
}

type QuizSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  name: String!
  quizzes(
    filters: QuizFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): QuizRelationResponseCollection
  updatedAt: DateTime
}

type QuizSubServiceEntity {
  attributes: QuizSubService
  id: ID
}

type QuizSubServiceEntityResponse {
  data: QuizSubServiceEntity
}

type QuizSubServiceEntityResponseCollection {
  data: [QuizSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input QuizSubServiceFiltersInput {
  and: [QuizSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: QuizSubServiceFiltersInput
  or: [QuizSubServiceFiltersInput]
  quizzes: QuizFiltersInput
  updatedAt: DateTimeFilterInput
}

input QuizSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  name: String
  quizzes: [ID]
}

type RecyclingGuideBlock {
  createdAt: DateTime
  homepage: HomepageEntityResponse
  recyclingGuideDisplayContent: String!
  subtitleContent: String!
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  titleContent: String!
  updatedAt: DateTime
}

type RecyclingGuideBlockEntity {
  attributes: RecyclingGuideBlock
  id: ID
}

type RecyclingGuideBlockEntityResponse {
  data: RecyclingGuideBlockEntity
}

type RecyclingGuideBlockEntityResponseCollection {
  data: [RecyclingGuideBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input RecyclingGuideBlockFiltersInput {
  and: [RecyclingGuideBlockFiltersInput]
  createdAt: DateTimeFilterInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: RecyclingGuideBlockFiltersInput
  or: [RecyclingGuideBlockFiltersInput]
  recyclingGuideDisplayContent: StringFilterInput
  subtitleContent: StringFilterInput
  tags: TagFiltersInput
  titleContent: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input RecyclingGuideBlockInput {
  homepage: ID
  recyclingGuideDisplayContent: String
  subtitleContent: String
  tags: [ID]
  titleContent: String
}

type RecyclingGuideService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  channelType: ChannelTypeEntityResponse
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityRelationResponseCollection
  contract: ContractEntityResponse
  createdAt: DateTime
  endDate: DateTime
  isActivated: Boolean!
  name: String
  startDate: DateTime
  updatedAt: DateTime
}

type RecyclingGuideServiceEntity {
  attributes: RecyclingGuideService
  id: ID
}

type RecyclingGuideServiceEntityResponse {
  data: RecyclingGuideServiceEntity
}

type RecyclingGuideServiceEntityResponseCollection {
  data: [RecyclingGuideServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input RecyclingGuideServiceFiltersInput {
  and: [RecyclingGuideServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  channelType: ChannelTypeFiltersInput
  cities: CityFiltersInput
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  endDate: DateTimeFilterInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: RecyclingGuideServiceFiltersInput
  or: [RecyclingGuideServiceFiltersInput]
  startDate: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input RecyclingGuideServiceInput {
  audienceTypes: [ID]
  channelType: ID
  cities: [ID]
  contract: ID
  endDate: DateTime
  isActivated: Boolean
  name: String
  startDate: DateTime
}

type RequestService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  channelType: ChannelTypeEntityResponse
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityRelationResponseCollection
  contract: ContractEntityResponse
  createdAt: DateTime
  endDate: DateTime
  isActivated: Boolean!
  name: String
  startDate: DateTime
  updatedAt: DateTime
}

type RequestServiceEntity {
  attributes: RequestService
  id: ID
  serviceId: ID
}

type RequestServiceEntityResponse {
  data: RequestServiceEntity
}

type RequestServiceEntityResponseCollection {
  data: [RequestServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input RequestServiceFiltersInput {
  and: [RequestServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  channelType: ChannelTypeFiltersInput
  cities: CityFiltersInput
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  endDate: DateTimeFilterInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: RequestServiceFiltersInput
  or: [RequestServiceFiltersInput]
  startDate: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input RequestServiceInput {
  audienceTypes: [ID]
  channelType: ID
  cities: [ID]
  contract: ID
  endDate: DateTime
  isActivated: Boolean
  name: String
  startDate: DateTime
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SearchEngineBlock {
  createdAt: DateTime
  homepage: HomepageEntityResponse
  titleContent: String!
  updatedAt: DateTime
}

type SearchEngineBlockEntity {
  attributes: SearchEngineBlock
  id: ID
}

type SearchEngineBlockEntityResponse {
  data: SearchEngineBlockEntity
}

type SearchEngineBlockEntityResponseCollection {
  data: [SearchEngineBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input SearchEngineBlockFiltersInput {
  and: [SearchEngineBlockFiltersInput]
  createdAt: DateTimeFilterInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: SearchEngineBlockFiltersInput
  or: [SearchEngineBlockFiltersInput]
  titleContent: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SearchEngineBlockInput {
  homepage: ID
  titleContent: String
}

type ServicesBlock {
  createdAt: DateTime
  homepage: HomepageEntityResponse
  serviceLinks: [ServicesBlockServiceLinksDynamicZone]
  titleContent: String!
  updatedAt: DateTime
}

type ServicesBlockEntity {
  attributes: ServicesBlock
  id: ID
}

type ServicesBlockEntityResponse {
  data: ServicesBlockEntity
}

type ServicesBlockEntityResponseCollection {
  data: [ServicesBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input ServicesBlockFiltersInput {
  and: [ServicesBlockFiltersInput]
  createdAt: DateTimeFilterInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: ServicesBlockFiltersInput
  or: [ServicesBlockFiltersInput]
  titleContent: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ServicesBlockInput {
  homepage: ID
  serviceLinks: [ServicesBlockServiceLinksDynamicZoneInput!]
  titleContent: String
}

union ServicesBlockServiceLinksDynamicZone =
    ComponentLinksCalendar
  | ComponentLinksContactUs
  | ComponentLinksEvents
  | ComponentLinksExternal
  | ComponentLinksFrees
  | ComponentLinksMap
  | ComponentLinksNews
  | ComponentLinksQuizzes
  | ComponentLinksRecycling
  | ComponentLinksRequest
  | ComponentLinksTips
  | Error

scalar ServicesBlockServiceLinksDynamicZoneInput

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  contract: ContractEntityResponse
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  updatedAt: DateTimeFilterInput
}

input TagInput {
  contract: ID
  name: String
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

type Territory {
  cities(
    filters: CityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CityRelationResponseCollection
  contract: ContractEntityResponse
  createdAt: DateTime
  epcis(
    filters: EpciFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EpciRelationResponseCollection
  name: String
  territoryType: TerritoryTypeEntityResponse
  updatedAt: DateTime
}

type TerritoryEntity {
  attributes: Territory
  id: ID
}

type TerritoryEntityResponse {
  data: TerritoryEntity
}

type TerritoryEntityResponseCollection {
  data: [TerritoryEntity!]!
  meta: ResponseCollectionMeta!
}

input TerritoryFiltersInput {
  and: [TerritoryFiltersInput]
  cities: CityFiltersInput
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  epcis: EpciFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: TerritoryFiltersInput
  or: [TerritoryFiltersInput]
  territoryType: TerritoryTypeFiltersInput
  updatedAt: DateTimeFilterInput
}

input TerritoryInput {
  cities: [ID]
  contract: ID
  epcis: [ID]
  name: String
  territoryType: ID
}

type TerritoryRelationResponseCollection {
  data: [TerritoryEntity!]!
}

type TerritoryType {
  createdAt: DateTime
  territoryType: String
  updatedAt: DateTime
}

type TerritoryTypeEntity {
  attributes: TerritoryType
  id: ID
}

type TerritoryTypeEntityResponse {
  data: TerritoryTypeEntity
}

type TerritoryTypeEntityResponseCollection {
  data: [TerritoryTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input TerritoryTypeFiltersInput {
  and: [TerritoryTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: TerritoryTypeFiltersInput
  or: [TerritoryTypeFiltersInput]
  territoryType: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TerritoryTypeInput {
  territoryType: String
}

type Tip {
  createdAt: DateTime
  editoContent: EditoContentEntityResponse
  link: String
  publishedAt: DateTime
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  tipSubService: TipSubServiceEntityResponse
  title: String!
  titleLabel: String
  updatedAt: DateTime
}

type TipEntity {
  attributes: Tip
  id: ID
}

type TipEntityResponse {
  data: TipEntity
}

type TipEntityResponseCollection {
  data: [TipEntity!]!
  meta: ResponseCollectionMeta!
}

input TipFiltersInput {
  and: [TipFiltersInput]
  createdAt: DateTimeFilterInput
  editoContent: EditoContentFiltersInput
  id: IDFilterInput
  link: StringFilterInput
  not: TipFiltersInput
  or: [TipFiltersInput]
  publishedAt: DateTimeFilterInput
  tags: TagFiltersInput
  tipSubService: TipSubServiceFiltersInput
  title: StringFilterInput
  titleLabel: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TipInput {
  editoContent: ID
  link: String
  publishedAt: DateTime
  tags: [ID]
  tipSubService: ID
  title: String
  titleLabel: String
}

type TipRelationResponseCollection {
  data: [TipEntity!]!
}

type TipSubService {
  audienceTypes(
    filters: AudienceTypeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AudienceTypeRelationResponseCollection
  createdAt: DateTime
  description: String
  editorialService: EditorialServiceEntityResponse
  isActivated: Boolean!
  name: String!
  tips(
    filters: TipFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): TipRelationResponseCollection
  updatedAt: DateTime
}

type TipSubServiceEntity {
  attributes: TipSubService
  id: ID
}

type TipSubServiceEntityResponse {
  data: TipSubServiceEntity
}

type TipSubServiceEntityResponseCollection {
  data: [TipSubServiceEntity!]!
  meta: ResponseCollectionMeta!
}

input TipSubServiceFiltersInput {
  and: [TipSubServiceFiltersInput]
  audienceTypes: AudienceTypeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  editorialService: EditorialServiceFiltersInput
  id: IDFilterInput
  isActivated: BooleanFilterInput
  name: StringFilterInput
  not: TipSubServiceFiltersInput
  or: [TipSubServiceFiltersInput]
  tips: TipFiltersInput
  updatedAt: DateTimeFilterInput
}

input TipSubServiceInput {
  audienceTypes: [ID]
  description: String
  editorialService: ID
  isActivated: Boolean
  name: String
  tips: [ID]
}

type TopContent {
  createdAt: DateTime
  editorialService: EditorialServiceEntityResponse
  event: EventEntityResponse
  news: NewEntityResponse
  topContentBlock: TopContentBlockEntityResponse
  updatedAt: DateTime
}

type TopContentBlock {
  createdAt: DateTime
  displayBlock: Boolean!
  displayLastThreeContents: Boolean!
  hasTopContent: Boolean!
  homepage: HomepageEntityResponse
  titleContent: String!
  topContent: TopContentEntityResponse
  updatedAt: DateTime
}

type TopContentBlockDTO {
  displayBlock: Boolean!
  displayLastThreeContents: Boolean!
  hasTopContent: Boolean!
  id: ID!
  titleContent: String!
  topContent: TopContentDTO
}

type TopContentBlockEntity {
  attributes: TopContentBlock
  id: ID
}

type TopContentBlockEntityResponse {
  data: TopContentBlockEntity
}

type TopContentBlockEntityResponseCollection {
  data: [TopContentBlockEntity!]!
  meta: ResponseCollectionMeta!
}

input TopContentBlockFiltersInput {
  and: [TopContentBlockFiltersInput]
  createdAt: DateTimeFilterInput
  displayBlock: BooleanFilterInput
  displayLastThreeContents: BooleanFilterInput
  hasTopContent: BooleanFilterInput
  homepage: HomepageFiltersInput
  id: IDFilterInput
  not: TopContentBlockFiltersInput
  or: [TopContentBlockFiltersInput]
  titleContent: StringFilterInput
  topContent: TopContentFiltersInput
  updatedAt: DateTimeFilterInput
}

input TopContentBlockInput {
  displayBlock: Boolean
  displayLastThreeContents: Boolean
  hasTopContent: Boolean
  homepage: ID
  titleContent: String
  topContent: ID
}

type TopContentDTO {
  attributes: Attributes!
  contentType: String!
  id: ID!
  typeName: String!
}

type TopContentEntity {
  attributes: TopContent
  id: ID
}

type TopContentEntityResponse {
  data: TopContentEntity
}

type TopContentEntityResponseCollection {
  data: [TopContentEntity!]!
  meta: ResponseCollectionMeta!
}

input TopContentFiltersInput {
  and: [TopContentFiltersInput]
  createdAt: DateTimeFilterInput
  editorialService: EditorialServiceFiltersInput
  event: EventFiltersInput
  id: IDFilterInput
  news: NewFiltersInput
  not: TopContentFiltersInput
  or: [TopContentFiltersInput]
  topContentBlock: TopContentBlockFiltersInput
  updatedAt: DateTimeFilterInput
}

input TopContentInput {
  editorialService: ID
  event: ID
  news: ID
  topContentBlock: ID
}

type TopContentRelationResponseCollection {
  data: [TopContentEntity!]!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  contract: ContractEntityResponse
  createdAt: DateTime
  email: String!
  profile: ProfileEntityResponse
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  contract: ContractFiltersInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  profile: ProfileFiltersInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  contract: ID
  email: String
  password: String
  profile: ID
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type totalCountPerTag {
  count: Int!
  id: ID!
  name: String!
}
